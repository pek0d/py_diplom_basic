from urllib.parse import urlencode

import requests  # type: ignore
import pprint
import json
import time
import sys
import base64
import webbrowser

from configuration import CLIENT_ID_YA_APP, CLIENT_YA_APP_SECRET

pp = pprint.PrettyPrinter(indent=2)

# credentials for app
client_id = CLIENT_ID_YA_APP
client_secret = CLIENT_YA_APP_SECRET


class YA_disk:
    api_base_url = "https://cloud-api.yandex.net/v1/disk"

    def __init__(self):
        self.client_id = client_id
        self.client_secret = client_secret

    def _build_url(self, api_method) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ API"""

        return f"{self.api_base_url}/{api_method}"

    def _write_responses(self, response) -> None:
        """–ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –≤ json –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""

        with open("response_info.json", "w") as f:
            json.dump(response.json(), f, indent=2, ensure_ascii=False)

    def request_confirm_code(self) -> None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        redirect_uri = "https://oauth.yandex.ru/verification_code"
        url_to_get_code = f"https://oauth.yandex.ru/authorize?response_type=code&client_id={client_id}&{redirect_uri}"
        user_input = input(
            "–î–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –í–∞—à–µ–º—É –Ø–Ω–¥–µ–∫—Å–î–∏—Å–∫—É –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n)"
        )
        if user_input in ["y", "yes", "–¥–∞", "–¥", "Y"]:
            webbrowser.open(url_to_get_code)
        else:
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            exit(0)

    def request_token_with_code(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""

        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        client_credentials = f"{self.client_id}:{self.client_secret}"
        encoded_client_credentials = base64.b64encode(
            client_credentials.encode())
        headers = {
            "Content-type": "application/x-www-form-urlencoded",
            "Authorization": f"Basic {encoded_client_credentials.decode()}",
        }
        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        code = input(
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –í–∞—à–µ–º—É –Ø–Ω–¥–µ–∫—Å–î–∏—Å–∫—É –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞: "
        )
        data = {
            "grant_type": "authorization_code",
            "code": code.strip(),
        }
        payload = urlencode(data)
        # –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        response = requests.post(
            "https://oauth.yandex.ru/token", headers=headers, data=payload
        )
        if response.status_code == 200:
            self.user_access_token = response.json()["access_token"]
        else:
            print(response.json()["error_description"])

        return self.user_access_token

    def create_upload_folder(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏"""

        url = self._build_url("resources")
        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        folder_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ")
        self.dir_name = folder_name
        params = {"path": folder_name}
        # –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        response = requests.put(
            url,
            headers={"Authorization": f"{self.user_access_token}"},
            params=params,
        )
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 201:
            print(f"–ü–∞–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {folder_name} —Å–æ–∑–¥–∞–Ω–∞")
        else:
            print(response.json()["message"])

        return self.dir_name

    def upload_ext_url(self, file_name: str, link2pic: str) -> None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π(–≤–Ω–µ—à–µ–Ω–µ–π) —Å—Å—ã–ª–∫–æ–∏ÃÜ"""

        url_for_upload = self._build_url("resources/upload")
        # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏ –∏–∑ —Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        folder = self.dir_name
        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = {"path": f"disk:/{folder}/{file_name}", "url": link2pic}
        encoded_params = urlencode(params)
        # –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É c –ø–æ–º–æ—â—å—é POST
        response = requests.post(
            url_for_upload,
            headers={"Authorization": f"{self.user_access_token}"},
            params=encoded_params,
        )

    def upload_from_json(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ –î–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–∞–º –∏–∑ json"""
        with open("for_upload_to_yadisk.json") as f:
            data = json.load(f)
            for _, photo_url in enumerate(data):
                sim_bar(_, data, bar_length=30)
                time.sleep(0.05)
                self.upload_ext_url(photo_url["file_name"], photo_url["url"])


def sim_bar(
    iteration: int, total: list, bar_length: int = 50, symbol: str = "üü¶"
) -> None:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""

    total = len(total)
    progress = (iteration + 1) / total
    arrow = symbol * int(round(bar_length * progress))
    spaces = " " * (bar_length - len(arrow))
    sys.stdout.write(f"\r[{arrow}{spaces}] {int(progress * 100)}%")
    sys.stdout.flush()


if __name__ == "__main__":
    ya = YA_disk()
    ya.request_confirm_code()
    ya.request_token_with_code()
    ya.create_upload_folder()
    ya.upload_from_json()
